/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.importer.jooq.stops.tables;


import fi.hsl.jore.importer.config.jooq.converter.time_range.TimeRange;
import fi.hsl.jore.importer.config.jooq.converter.time_range.TimeRangeBinding;
import fi.hsl.jore.importer.jooq.stops.Keys;
import fi.hsl.jore.importer.jooq.stops.Stops;
import fi.hsl.jore.importer.jooq.stops.tables.records.StopPlacesRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StopPlaces extends TableImpl<StopPlacesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stops.stop_places</code>
     */
    public static final StopPlaces STOP_PLACES = new StopPlaces();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StopPlacesRecord> getRecordType() {
        return StopPlacesRecord.class;
    }

    /**
     * The column <code>stops.stop_places.stops_stop_place_id</code>.
     */
    public final TableField<StopPlacesRecord, UUID> STOPS_STOP_PLACE_ID = createField(DSL.name("stops_stop_place_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>stops.stop_places.stops_stop_place_ext_id</code>.
     */
    public final TableField<StopPlacesRecord, String> STOPS_STOP_PLACE_EXT_ID = createField(DSL.name("stops_stop_place_ext_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>stops.stop_places.stops_stop_place_name</code>.
     */
    public final TableField<StopPlacesRecord, JSONB> STOPS_STOP_PLACE_NAME = createField(DSL.name("stops_stop_place_name"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>stops.stop_places.stops_stop_place_long_name</code>.
     */
    public final TableField<StopPlacesRecord, JSONB> STOPS_STOP_PLACE_LONG_NAME = createField(DSL.name("stops_stop_place_long_name"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>stops.stop_places.stops_stop_place_location</code>.
     */
    public final TableField<StopPlacesRecord, JSONB> STOPS_STOP_PLACE_LOCATION = createField(DSL.name("stops_stop_place_location"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>stops.stop_places.stops_stop_place_sys_period</code>.
     */
    public final TableField<StopPlacesRecord, TimeRange> STOPS_STOP_PLACE_SYS_PERIOD = createField(DSL.name("stops_stop_place_sys_period"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\"").nullable(false).defaultValue(DSL.field(DSL.raw("tstzrange(CURRENT_TIMESTAMP, NULL::timestamp with time zone)"), org.jooq.impl.SQLDataType.OTHER)), this, "", new TimeRangeBinding());

    private StopPlaces(Name alias, Table<StopPlacesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private StopPlaces(Name alias, Table<StopPlacesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>stops.stop_places</code> table reference
     */
    public StopPlaces(String alias) {
        this(DSL.name(alias), STOP_PLACES);
    }

    /**
     * Create an aliased <code>stops.stop_places</code> table reference
     */
    public StopPlaces(Name alias) {
        this(alias, STOP_PLACES);
    }

    /**
     * Create a <code>stops.stop_places</code> table reference
     */
    public StopPlaces() {
        this(DSL.name("stop_places"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stops.STOPS;
    }

    @Override
    public UniqueKey<StopPlacesRecord> getPrimaryKey() {
        return Keys.STOP_PLACES_PKEY;
    }

    @Override
    public StopPlaces as(String alias) {
        return new StopPlaces(DSL.name(alias), this);
    }

    @Override
    public StopPlaces as(Name alias) {
        return new StopPlaces(alias, this);
    }

    @Override
    public StopPlaces as(Table<?> alias) {
        return new StopPlaces(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StopPlaces rename(String name) {
        return new StopPlaces(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StopPlaces rename(Name name) {
        return new StopPlaces(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StopPlaces rename(Table<?> name) {
        return new StopPlaces(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StopPlaces where(Condition condition) {
        return new StopPlaces(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StopPlaces where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StopPlaces where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StopPlaces where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StopPlaces where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StopPlaces where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StopPlaces where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StopPlaces where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StopPlaces whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StopPlaces whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
