/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.importer.jooq.infrastructure_network.tables;


import fi.hsl.jore.importer.jooq.infrastructure_network.InfrastructureNetwork;
import fi.hsl.jore.importer.jooq.infrastructure_network.Keys;
import fi.hsl.jore.importer.jooq.infrastructure_network.tables.records.InfrastructureNodeTypesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InfrastructureNodeTypes extends TableImpl<InfrastructureNodeTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>infrastructure_network.infrastructure_node_types</code>
     */
    public static final InfrastructureNodeTypes INFRASTRUCTURE_NODE_TYPES = new InfrastructureNodeTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InfrastructureNodeTypesRecord> getRecordType() {
        return InfrastructureNodeTypesRecord.class;
    }

    /**
     * The column <code>infrastructure_network.infrastructure_node_types.infrastructure_node_type_value</code>.
     */
    public final TableField<InfrastructureNodeTypesRecord, String> INFRASTRUCTURE_NODE_TYPE_VALUE = createField(DSL.name("infrastructure_node_type_value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>infrastructure_network.infrastructure_node_types.infrastructure_node_type_comment</code>.
     */
    public final TableField<InfrastructureNodeTypesRecord, String> INFRASTRUCTURE_NODE_TYPE_COMMENT = createField(DSL.name("infrastructure_node_type_comment"), SQLDataType.CLOB.nullable(false), this, "");

    private InfrastructureNodeTypes(Name alias, Table<InfrastructureNodeTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private InfrastructureNodeTypes(Name alias, Table<InfrastructureNodeTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>infrastructure_network.infrastructure_node_types</code> table reference
     */
    public InfrastructureNodeTypes(String alias) {
        this(DSL.name(alias), INFRASTRUCTURE_NODE_TYPES);
    }

    /**
     * Create an aliased <code>infrastructure_network.infrastructure_node_types</code> table reference
     */
    public InfrastructureNodeTypes(Name alias) {
        this(alias, INFRASTRUCTURE_NODE_TYPES);
    }

    /**
     * Create a <code>infrastructure_network.infrastructure_node_types</code> table reference
     */
    public InfrastructureNodeTypes() {
        this(DSL.name("infrastructure_node_types"), null);
    }

    public <O extends Record> InfrastructureNodeTypes(Table<O> child, ForeignKey<O, InfrastructureNodeTypesRecord> key) {
        super(child, key, INFRASTRUCTURE_NODE_TYPES);
    }

    @Override
    public Schema getSchema() {
        return InfrastructureNetwork.INFRASTRUCTURE_NETWORK;
    }

    @Override
    public UniqueKey<InfrastructureNodeTypesRecord> getPrimaryKey() {
        return Keys.INFRASTRUCTURE_NODE_TYPES_PKEY;
    }

    @Override
    public List<UniqueKey<InfrastructureNodeTypesRecord>> getKeys() {
        return Arrays.<UniqueKey<InfrastructureNodeTypesRecord>>asList(Keys.INFRASTRUCTURE_NODE_TYPES_PKEY);
    }

    @Override
    public InfrastructureNodeTypes as(String alias) {
        return new InfrastructureNodeTypes(DSL.name(alias), this);
    }

    @Override
    public InfrastructureNodeTypes as(Name alias) {
        return new InfrastructureNodeTypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureNodeTypes rename(String name) {
        return new InfrastructureNodeTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureNodeTypes rename(Name name) {
        return new InfrastructureNodeTypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
