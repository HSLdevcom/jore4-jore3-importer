/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.importer.jooq.network.tables;


import fi.hsl.jore.importer.jooq.network.Keys;
import fi.hsl.jore.importer.jooq.network.Network;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRouteDirections.NetworkRouteDirectionsPath;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRouteDirectionsStaging.NetworkRouteDirectionsStagingPath;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkDirectionTypesRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NetworkDirectionTypes extends TableImpl<NetworkDirectionTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>network.network_direction_types</code>
     */
    public static final NetworkDirectionTypes NETWORK_DIRECTION_TYPES = new NetworkDirectionTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NetworkDirectionTypesRecord> getRecordType() {
        return NetworkDirectionTypesRecord.class;
    }

    /**
     * The column
     * <code>network.network_direction_types.network_direction_type</code>.
     */
    public final TableField<NetworkDirectionTypesRecord, String> NETWORK_DIRECTION_TYPE = createField(DSL.name("network_direction_type"), SQLDataType.CLOB.nullable(false), this, "");

    private NetworkDirectionTypes(Name alias, Table<NetworkDirectionTypesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NetworkDirectionTypes(Name alias, Table<NetworkDirectionTypesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>network.network_direction_types</code> table
     * reference
     */
    public NetworkDirectionTypes(String alias) {
        this(DSL.name(alias), NETWORK_DIRECTION_TYPES);
    }

    /**
     * Create an aliased <code>network.network_direction_types</code> table
     * reference
     */
    public NetworkDirectionTypes(Name alias) {
        this(alias, NETWORK_DIRECTION_TYPES);
    }

    /**
     * Create a <code>network.network_direction_types</code> table reference
     */
    public NetworkDirectionTypes() {
        this(DSL.name("network_direction_types"), null);
    }

    public <O extends Record> NetworkDirectionTypes(Table<O> path, ForeignKey<O, NetworkDirectionTypesRecord> childPath, InverseForeignKey<O, NetworkDirectionTypesRecord> parentPath) {
        super(path, childPath, parentPath, NETWORK_DIRECTION_TYPES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NetworkDirectionTypesPath extends NetworkDirectionTypes implements Path<NetworkDirectionTypesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NetworkDirectionTypesPath(Table<O> path, ForeignKey<O, NetworkDirectionTypesRecord> childPath, InverseForeignKey<O, NetworkDirectionTypesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NetworkDirectionTypesPath(Name alias, Table<NetworkDirectionTypesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NetworkDirectionTypesPath as(String alias) {
            return new NetworkDirectionTypesPath(DSL.name(alias), this);
        }

        @Override
        public NetworkDirectionTypesPath as(Name alias) {
            return new NetworkDirectionTypesPath(alias, this);
        }

        @Override
        public NetworkDirectionTypesPath as(Table<?> alias) {
            return new NetworkDirectionTypesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Network.NETWORK;
    }

    @Override
    public UniqueKey<NetworkDirectionTypesRecord> getPrimaryKey() {
        return Keys.NETWORK_DIRECTION_TYPES_PKEY;
    }

    private transient NetworkRouteDirectionsPath _networkRouteDirections;

    /**
     * Get the implicit to-many join path to the
     * <code>network.network_route_directions</code> table
     */
    public NetworkRouteDirectionsPath networkRouteDirections() {
        if (_networkRouteDirections == null)
            _networkRouteDirections = new NetworkRouteDirectionsPath(this, null, Keys.NETWORK_ROUTE_DIRECTIONS__NETWORK_ROUTE_DIRECTIONS_NETWORK_ROUTE_DIRECTION_TYPE_FKEY.getInverseKey());

        return _networkRouteDirections;
    }

    private transient NetworkRouteDirectionsStagingPath _networkRouteDirectionsStaging;

    /**
     * Get the implicit to-many join path to the
     * <code>network.network_route_directions_staging</code> table
     */
    public NetworkRouteDirectionsStagingPath networkRouteDirectionsStaging() {
        if (_networkRouteDirectionsStaging == null)
            _networkRouteDirectionsStaging = new NetworkRouteDirectionsStagingPath(this, null, Keys.NETWORK_ROUTE_DIRECTIONS_STAGING__NETWORK_ROUTE_DIRECTIONS_STAG_NETWORK_ROUTE_DIRECTION_TYPE_FKEY.getInverseKey());

        return _networkRouteDirectionsStaging;
    }

    @Override
    public NetworkDirectionTypes as(String alias) {
        return new NetworkDirectionTypes(DSL.name(alias), this);
    }

    @Override
    public NetworkDirectionTypes as(Name alias) {
        return new NetworkDirectionTypes(alias, this);
    }

    @Override
    public NetworkDirectionTypes as(Table<?> alias) {
        return new NetworkDirectionTypes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NetworkDirectionTypes rename(String name) {
        return new NetworkDirectionTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NetworkDirectionTypes rename(Name name) {
        return new NetworkDirectionTypes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NetworkDirectionTypes rename(Table<?> name) {
        return new NetworkDirectionTypes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NetworkDirectionTypes where(Condition condition) {
        return new NetworkDirectionTypes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NetworkDirectionTypes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NetworkDirectionTypes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NetworkDirectionTypes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NetworkDirectionTypes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NetworkDirectionTypes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NetworkDirectionTypes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NetworkDirectionTypes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NetworkDirectionTypes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NetworkDirectionTypes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
