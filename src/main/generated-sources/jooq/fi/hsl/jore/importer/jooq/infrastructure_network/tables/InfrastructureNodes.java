/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.importer.jooq.infrastructure_network.tables;


import fi.hsl.jore.importer.config.jooq.converter.geometry.PointBinding;
import fi.hsl.jore.importer.config.jooq.converter.time_range.TimeRange;
import fi.hsl.jore.importer.config.jooq.converter.time_range.TimeRangeBinding;
import fi.hsl.jore.importer.jooq.infrastructure_network.InfrastructureNetwork;
import fi.hsl.jore.importer.jooq.infrastructure_network.Keys;
import fi.hsl.jore.importer.jooq.infrastructure_network.tables.records.InfrastructureNodesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.locationtech.jts.geom.Point;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InfrastructureNodes extends TableImpl<InfrastructureNodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>infrastructure_network.infrastructure_nodes</code>
     */
    public static final InfrastructureNodes INFRASTRUCTURE_NODES = new InfrastructureNodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InfrastructureNodesRecord> getRecordType() {
        return InfrastructureNodesRecord.class;
    }

    /**
     * The column <code>infrastructure_network.infrastructure_nodes.infrastructure_node_id</code>.
     */
    public final TableField<InfrastructureNodesRecord, UUID> INFRASTRUCTURE_NODE_ID = createField(DSL.name("infrastructure_node_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>infrastructure_network.infrastructure_nodes.infrastructure_node_ext_id</code>.
     */
    public final TableField<InfrastructureNodesRecord, String> INFRASTRUCTURE_NODE_EXT_ID = createField(DSL.name("infrastructure_node_ext_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>infrastructure_network.infrastructure_nodes.infrastructure_node_type</code>.
     */
    public final TableField<InfrastructureNodesRecord, String> INFRASTRUCTURE_NODE_TYPE = createField(DSL.name("infrastructure_node_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>infrastructure_network.infrastructure_nodes.infrastructure_node_location</code>.
     */
    public final TableField<InfrastructureNodesRecord, Point> INFRASTRUCTURE_NODE_LOCATION = createField(DSL.name("infrastructure_node_location"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\"").nullable(false), this, "", new PointBinding());

    /**
     * The column <code>infrastructure_network.infrastructure_nodes.infrastructure_node_projected_location</code>.
     */
    public final TableField<InfrastructureNodesRecord, Point> INFRASTRUCTURE_NODE_PROJECTED_LOCATION = createField(DSL.name("infrastructure_node_projected_location"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "", new PointBinding());

    /**
     * The column <code>infrastructure_network.infrastructure_nodes.infrastructure_node_sys_period</code>.
     */
    public final TableField<InfrastructureNodesRecord, TimeRange> INFRASTRUCTURE_NODE_SYS_PERIOD = createField(DSL.name("infrastructure_node_sys_period"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\"").nullable(false).defaultValue(DSL.field("tstzrange(CURRENT_TIMESTAMP, NULL::timestamp with time zone)", org.jooq.impl.SQLDataType.OTHER)), this, "", new TimeRangeBinding());

    private InfrastructureNodes(Name alias, Table<InfrastructureNodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private InfrastructureNodes(Name alias, Table<InfrastructureNodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>infrastructure_network.infrastructure_nodes</code> table reference
     */
    public InfrastructureNodes(String alias) {
        this(DSL.name(alias), INFRASTRUCTURE_NODES);
    }

    /**
     * Create an aliased <code>infrastructure_network.infrastructure_nodes</code> table reference
     */
    public InfrastructureNodes(Name alias) {
        this(alias, INFRASTRUCTURE_NODES);
    }

    /**
     * Create a <code>infrastructure_network.infrastructure_nodes</code> table reference
     */
    public InfrastructureNodes() {
        this(DSL.name("infrastructure_nodes"), null);
    }

    public <O extends Record> InfrastructureNodes(Table<O> child, ForeignKey<O, InfrastructureNodesRecord> key) {
        super(child, key, INFRASTRUCTURE_NODES);
    }

    @Override
    public Schema getSchema() {
        return InfrastructureNetwork.INFRASTRUCTURE_NETWORK;
    }

    @Override
    public UniqueKey<InfrastructureNodesRecord> getPrimaryKey() {
        return Keys.INFRASTRUCTURE_NODES_PKEY;
    }

    @Override
    public List<UniqueKey<InfrastructureNodesRecord>> getKeys() {
        return Arrays.<UniqueKey<InfrastructureNodesRecord>>asList(Keys.INFRASTRUCTURE_NODES_PKEY);
    }

    @Override
    public List<ForeignKey<InfrastructureNodesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InfrastructureNodesRecord, ?>>asList(Keys.INFRASTRUCTURE_NODES__INFRASTRUCTURE_NODES_INFRASTRUCTURE_NODE_TYPE_FKEY);
    }

    private transient InfrastructureNodeTypes _infrastructureNodeTypes;

    public InfrastructureNodeTypes infrastructureNodeTypes() {
        if (_infrastructureNodeTypes == null)
            _infrastructureNodeTypes = new InfrastructureNodeTypes(this, Keys.INFRASTRUCTURE_NODES__INFRASTRUCTURE_NODES_INFRASTRUCTURE_NODE_TYPE_FKEY);

        return _infrastructureNodeTypes;
    }

    @Override
    public InfrastructureNodes as(String alias) {
        return new InfrastructureNodes(DSL.name(alias), this);
    }

    @Override
    public InfrastructureNodes as(Name alias) {
        return new InfrastructureNodes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureNodes rename(String name) {
        return new InfrastructureNodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureNodes rename(Name name) {
        return new InfrastructureNodes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, Point, Point, TimeRange> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
