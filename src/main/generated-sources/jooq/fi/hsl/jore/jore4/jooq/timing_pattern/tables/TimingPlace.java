/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.timing_pattern.tables;


import fi.hsl.jore.jore4.jooq.timing_pattern.TimingPattern;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * A set of SCHEDULED STOP POINTs against which the timing information necessary
 * to build schedules may be recorded. In HSL context this is "Hastus paikka".
 * Based on Transmodel entity TIMING POINT:
 * https://www.transmodel-cen.eu/model/index.htm?goto=2:3:2:709 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimingPlace extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>timing_pattern.timing_place</code>
     */
    public static final TimingPlace TIMING_PLACE = new TimingPlace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>timing_pattern.timing_place.timing_place_id</code>.
     */
    public final TableField<Record, UUID> TIMING_PLACE_ID = createField(DSL.name("timing_place_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("public.gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>timing_pattern.timing_place.label</code>.
     */
    public final TableField<Record, String> LABEL = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>timing_pattern.timing_place.description</code>.
     */
    public final TableField<Record, JSONB> DESCRIPTION = createField(DSL.name("description"), SQLDataType.JSONB, this, "");

    private TimingPlace(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TimingPlace(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("A set of SCHEDULED STOP POINTs against which the timing information necessary to build schedules may be recorded. In HSL context this is \"Hastus paikka\". Based on Transmodel entity TIMING POINT: https://www.transmodel-cen.eu/model/index.htm?goto=2:3:2:709 "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>timing_pattern.timing_place</code> table
     * reference
     */
    public TimingPlace(String alias) {
        this(DSL.name(alias), TIMING_PLACE);
    }

    /**
     * Create an aliased <code>timing_pattern.timing_place</code> table
     * reference
     */
    public TimingPlace(Name alias) {
        this(alias, TIMING_PLACE);
    }

    /**
     * Create a <code>timing_pattern.timing_place</code> table reference
     */
    public TimingPlace() {
        this(DSL.name("timing_place"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TimingPattern.TIMING_PATTERN;
    }

    @Override
    public TimingPlace as(String alias) {
        return new TimingPlace(DSL.name(alias), this);
    }

    @Override
    public TimingPlace as(Name alias) {
        return new TimingPlace(alias, this);
    }

    @Override
    public TimingPlace as(Table<?> alias) {
        return new TimingPlace(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TimingPlace rename(String name) {
        return new TimingPlace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimingPlace rename(Name name) {
        return new TimingPlace(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimingPlace rename(Table<?> name) {
        return new TimingPlace(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimingPlace where(Condition condition) {
        return new TimingPlace(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimingPlace where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimingPlace where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimingPlace where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimingPlace where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimingPlace where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimingPlace where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimingPlace where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimingPlace whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimingPlace whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
