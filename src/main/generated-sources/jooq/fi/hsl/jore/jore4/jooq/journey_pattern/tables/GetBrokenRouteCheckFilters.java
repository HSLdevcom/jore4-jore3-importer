/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.journey_pattern.tables;


import fi.hsl.jore.jore4.jooq.journey_pattern.JourneyPattern;

import java.time.LocalDate;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetBrokenRouteCheckFilters extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>journey_pattern.get_broken_route_check_filters</code>
     */
    public static final GetBrokenRouteCheckFilters GET_BROKEN_ROUTE_CHECK_FILTERS = new GetBrokenRouteCheckFilters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>journey_pattern.get_broken_route_check_filters.labels</code>.
     */
    public final TableField<Record, String[]> LABELS = createField(DSL.name("labels"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column
     * <code>journey_pattern.get_broken_route_check_filters.validity_start</code>.
     */
    public final TableField<Record, LocalDate> VALIDITY_START = createField(DSL.name("validity_start"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>journey_pattern.get_broken_route_check_filters.validity_end</code>.
     */
    public final TableField<Record, LocalDate> VALIDITY_END = createField(DSL.name("validity_end"), SQLDataType.LOCALDATE, this, "");

    private GetBrokenRouteCheckFilters(Name alias, Table<Record> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.UUID.array())
        });
    }

    private GetBrokenRouteCheckFilters(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private GetBrokenRouteCheckFilters(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased
     * <code>journey_pattern.get_broken_route_check_filters</code> table
     * reference
     */
    public GetBrokenRouteCheckFilters(String alias) {
        this(DSL.name(alias), GET_BROKEN_ROUTE_CHECK_FILTERS);
    }

    /**
     * Create an aliased
     * <code>journey_pattern.get_broken_route_check_filters</code> table
     * reference
     */
    public GetBrokenRouteCheckFilters(Name alias) {
        this(alias, GET_BROKEN_ROUTE_CHECK_FILTERS);
    }

    /**
     * Create a <code>journey_pattern.get_broken_route_check_filters</code>
     * table reference
     */
    public GetBrokenRouteCheckFilters() {
        this(DSL.name("get_broken_route_check_filters"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JourneyPattern.JOURNEY_PATTERN;
    }

    @Override
    public GetBrokenRouteCheckFilters as(String alias) {
        return new GetBrokenRouteCheckFilters(DSL.name(alias), this, parameters);
    }

    @Override
    public GetBrokenRouteCheckFilters as(Name alias) {
        return new GetBrokenRouteCheckFilters(alias, this, parameters);
    }

    @Override
    public GetBrokenRouteCheckFilters as(Table<?> alias) {
        return new GetBrokenRouteCheckFilters(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetBrokenRouteCheckFilters rename(String name) {
        return new GetBrokenRouteCheckFilters(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetBrokenRouteCheckFilters rename(Name name) {
        return new GetBrokenRouteCheckFilters(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetBrokenRouteCheckFilters rename(Table<?> name) {
        return new GetBrokenRouteCheckFilters(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public GetBrokenRouteCheckFilters call(
          UUID[] filterRouteIds
    ) {
        GetBrokenRouteCheckFilters result = new GetBrokenRouteCheckFilters(DSL.name("get_broken_route_check_filters"), null, new Field[] {
            DSL.val(filterRouteIds, SQLDataType.UUID.array())
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public GetBrokenRouteCheckFilters call(
          Field<UUID[]> filterRouteIds
    ) {
        GetBrokenRouteCheckFilters result = new GetBrokenRouteCheckFilters(DSL.name("get_broken_route_check_filters"), null, new Field[] {
            filterRouteIds
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
