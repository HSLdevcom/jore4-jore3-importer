/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.journey_pattern.tables;


import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The journey patterns, i.e. the ordered lists of stops and timing points along
 * routes: https://www.transmodel-cen.eu/model/index.htm?goto=2:3:1:813
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JourneyPattern extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>journey_pattern.journey_pattern</code>
     */
    public static final JourneyPattern JOURNEY_PATTERN_ = new JourneyPattern();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>journey_pattern.journey_pattern.journey_pattern_id</code>. The ID
     * of the journey pattern.
     */
    public final TableField<Record, UUID> JOURNEY_PATTERN_ID = createField(DSL.name("journey_pattern_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "The ID of the journey pattern.");

    /**
     * The column <code>journey_pattern.journey_pattern.on_route_id</code>. The
     * ID of the route the journey pattern is on.
     */
    public final TableField<Record, UUID> ON_ROUTE_ID = createField(DSL.name("on_route_id"), SQLDataType.UUID.nullable(false), this, "The ID of the route the journey pattern is on.");

    private JourneyPattern(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JourneyPattern(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("The journey patterns, i.e. the ordered lists of stops and timing points along routes: https://www.transmodel-cen.eu/model/index.htm?goto=2:3:1:813"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>journey_pattern.journey_pattern</code> table
     * reference
     */
    public JourneyPattern(String alias) {
        this(DSL.name(alias), JOURNEY_PATTERN_);
    }

    /**
     * Create an aliased <code>journey_pattern.journey_pattern</code> table
     * reference
     */
    public JourneyPattern(Name alias) {
        this(alias, JOURNEY_PATTERN_);
    }

    /**
     * Create a <code>journey_pattern.journey_pattern</code> table reference
     */
    public JourneyPattern() {
        this(DSL.name("journey_pattern"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : fi.hsl.jore.jore4.jooq.journey_pattern.JourneyPattern.JOURNEY_PATTERN;
    }

    @Override
    public JourneyPattern as(String alias) {
        return new JourneyPattern(DSL.name(alias), this);
    }

    @Override
    public JourneyPattern as(Name alias) {
        return new JourneyPattern(alias, this);
    }

    @Override
    public JourneyPattern as(Table<?> alias) {
        return new JourneyPattern(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JourneyPattern rename(String name) {
        return new JourneyPattern(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JourneyPattern rename(Name name) {
        return new JourneyPattern(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JourneyPattern rename(Table<?> name) {
        return new JourneyPattern(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JourneyPattern where(Condition condition) {
        return new JourneyPattern(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JourneyPattern where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JourneyPattern where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JourneyPattern where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JourneyPattern where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JourneyPattern where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JourneyPattern where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JourneyPattern where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JourneyPattern whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JourneyPattern whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
