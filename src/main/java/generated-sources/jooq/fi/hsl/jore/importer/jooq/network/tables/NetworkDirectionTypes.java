/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.importer.jooq.network.tables;


import fi.hsl.jore.importer.jooq.network.Keys;
import fi.hsl.jore.importer.jooq.network.Network;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkDirectionTypesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NetworkDirectionTypes extends TableImpl<NetworkDirectionTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>network.network_direction_types</code>
     */
    public static final NetworkDirectionTypes NETWORK_DIRECTION_TYPES = new NetworkDirectionTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NetworkDirectionTypesRecord> getRecordType() {
        return NetworkDirectionTypesRecord.class;
    }

    /**
     * The column
     * <code>network.network_direction_types.network_direction_type</code>.
     */
    public final TableField<NetworkDirectionTypesRecord, String> NETWORK_DIRECTION_TYPE = createField(DSL.name("network_direction_type"), SQLDataType.CLOB.nullable(false), this, "");

    private NetworkDirectionTypes(Name alias, Table<NetworkDirectionTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private NetworkDirectionTypes(Name alias, Table<NetworkDirectionTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>network.network_direction_types</code> table
     * reference
     */
    public NetworkDirectionTypes(String alias) {
        this(DSL.name(alias), NETWORK_DIRECTION_TYPES);
    }

    /**
     * Create an aliased <code>network.network_direction_types</code> table
     * reference
     */
    public NetworkDirectionTypes(Name alias) {
        this(alias, NETWORK_DIRECTION_TYPES);
    }

    /**
     * Create a <code>network.network_direction_types</code> table reference
     */
    public NetworkDirectionTypes() {
        this(DSL.name("network_direction_types"), null);
    }

    public <O extends Record> NetworkDirectionTypes(Table<O> child, ForeignKey<O, NetworkDirectionTypesRecord> key) {
        super(child, key, NETWORK_DIRECTION_TYPES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Network.NETWORK;
    }

    @Override
    public UniqueKey<NetworkDirectionTypesRecord> getPrimaryKey() {
        return Keys.NETWORK_DIRECTION_TYPES_PKEY;
    }

    @Override
    public NetworkDirectionTypes as(String alias) {
        return new NetworkDirectionTypes(DSL.name(alias), this);
    }

    @Override
    public NetworkDirectionTypes as(Name alias) {
        return new NetworkDirectionTypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NetworkDirectionTypes rename(String name) {
        return new NetworkDirectionTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NetworkDirectionTypes rename(Name name) {
        return new NetworkDirectionTypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
