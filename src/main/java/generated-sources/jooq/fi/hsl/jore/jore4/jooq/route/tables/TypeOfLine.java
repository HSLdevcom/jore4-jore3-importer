/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.route.tables;


import fi.hsl.jore.jore4.jooq.route.Route;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Type of line. https://www.transmodel-cen.eu/model/EARoot/EA2/EA1/EA3/EA491.htm
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeOfLine extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>route.type_of_line</code>
     */
    public static final TypeOfLine TYPE_OF_LINE = new TypeOfLine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>route.type_of_line.type_of_line</code>. GTFS route type: https://developers.google.com/transit/gtfs/reference/extended-route-types
     */
    public final TableField<Record, String> TYPE_OF_LINE_ = createField(DSL.name("type_of_line"), SQLDataType.CLOB.nullable(false), this, "GTFS route type: https://developers.google.com/transit/gtfs/reference/extended-route-types");

    /**
     * The column <code>route.type_of_line.belonging_to_vehicle_mode</code>.
     */
    public final TableField<Record, String> BELONGING_TO_VEHICLE_MODE = createField(DSL.name("belonging_to_vehicle_mode"), SQLDataType.CLOB.nullable(false), this, "");

    private TypeOfLine(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private TypeOfLine(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Type of line. https://www.transmodel-cen.eu/model/EARoot/EA2/EA1/EA3/EA491.htm"), TableOptions.table());
    }

    /**
     * Create an aliased <code>route.type_of_line</code> table reference
     */
    public TypeOfLine(String alias) {
        this(DSL.name(alias), TYPE_OF_LINE);
    }

    /**
     * Create an aliased <code>route.type_of_line</code> table reference
     */
    public TypeOfLine(Name alias) {
        this(alias, TYPE_OF_LINE);
    }

    /**
     * Create a <code>route.type_of_line</code> table reference
     */
    public TypeOfLine() {
        this(DSL.name("type_of_line"), null);
    }

    public <O extends Record> TypeOfLine(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TYPE_OF_LINE);
    }

    @Override
    public Schema getSchema() {
        return Route.ROUTE;
    }

    @Override
    public TypeOfLine as(String alias) {
        return new TypeOfLine(DSL.name(alias), this);
    }

    @Override
    public TypeOfLine as(Name alias) {
        return new TypeOfLine(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TypeOfLine rename(String name) {
        return new TypeOfLine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TypeOfLine rename(Name name) {
        return new TypeOfLine(name, null);
    }
}
