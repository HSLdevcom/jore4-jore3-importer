/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.importer.jooq.network;


import fi.hsl.jore.importer.jooq.infrastructure_network.tables.InfrastructureLinks;
import fi.hsl.jore.importer.jooq.infrastructure_network.tables.InfrastructureNetworkTypes;
import fi.hsl.jore.importer.jooq.infrastructure_network.tables.InfrastructureNodes;
import fi.hsl.jore.importer.jooq.infrastructure_network.tables.records.InfrastructureLinksRecord;
import fi.hsl.jore.importer.jooq.infrastructure_network.tables.records.InfrastructureNetworkTypesRecord;
import fi.hsl.jore.importer.jooq.infrastructure_network.tables.records.InfrastructureNodesRecord;
import fi.hsl.jore.importer.jooq.network.tables.NetworkDirectionTypes;
import fi.hsl.jore.importer.jooq.network.tables.NetworkLineHeaders;
import fi.hsl.jore.importer.jooq.network.tables.NetworkLineHeadersStaging;
import fi.hsl.jore.importer.jooq.network.tables.NetworkLines;
import fi.hsl.jore.importer.jooq.network.tables.NetworkLinesStaging;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRouteDirections;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRouteDirectionsStaging;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRouteLinks;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRouteLinksStaging;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRoutePoints;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRoutePointsStaging;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRouteStopPoints;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRouteStopPointsStaging;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRoutes;
import fi.hsl.jore.importer.jooq.network.tables.NetworkRoutesStaging;
import fi.hsl.jore.importer.jooq.network.tables.ScheduledStopPoints;
import fi.hsl.jore.importer.jooq.network.tables.ScheduledStopPointsStaging;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkDirectionTypesRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkLineHeadersRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkLineHeadersStagingRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkLinesRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkLinesStagingRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRouteDirectionsRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRouteDirectionsStagingRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRouteLinksRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRouteLinksStagingRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRoutePointsRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRoutePointsStagingRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRouteStopPointsRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRouteStopPointsStagingRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRoutesRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkRoutesStagingRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.ScheduledStopPointsRecord;
import fi.hsl.jore.importer.jooq.network.tables.records.ScheduledStopPointsStagingRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * network.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<NetworkDirectionTypesRecord> NETWORK_DIRECTION_TYPES_PKEY = Internal.createUniqueKey(NetworkDirectionTypes.NETWORK_DIRECTION_TYPES, DSL.name("network_direction_types_pkey"), new TableField[] { NetworkDirectionTypes.NETWORK_DIRECTION_TYPES.NETWORK_DIRECTION_TYPE }, true);
    public static final UniqueKey<NetworkLineHeadersRecord> NETWORK_LINE_HEADERS_PKEY = Internal.createUniqueKey(NetworkLineHeaders.NETWORK_LINE_HEADERS, DSL.name("network_line_headers_pkey"), new TableField[] { NetworkLineHeaders.NETWORK_LINE_HEADERS.NETWORK_LINE_HEADER_ID }, true);
    public static final UniqueKey<NetworkLineHeadersStagingRecord> NETWORK_LINE_HEADERS_STAGING_PKEY = Internal.createUniqueKey(NetworkLineHeadersStaging.NETWORK_LINE_HEADERS_STAGING, DSL.name("network_line_headers_staging_pkey"), new TableField[] { NetworkLineHeadersStaging.NETWORK_LINE_HEADERS_STAGING.NETWORK_LINE_HEADER_EXT_ID }, true);
    public static final UniqueKey<NetworkLinesRecord> NETWORK_LINES_PKEY = Internal.createUniqueKey(NetworkLines.NETWORK_LINES, DSL.name("network_lines_pkey"), new TableField[] { NetworkLines.NETWORK_LINES.NETWORK_LINE_ID }, true);
    public static final UniqueKey<NetworkLinesStagingRecord> NETWORK_LINES_STAGING_PKEY = Internal.createUniqueKey(NetworkLinesStaging.NETWORK_LINES_STAGING, DSL.name("network_lines_staging_pkey"), new TableField[] { NetworkLinesStaging.NETWORK_LINES_STAGING.NETWORK_LINE_EXT_ID }, true);
    public static final UniqueKey<NetworkRouteDirectionsRecord> NETWORK_ROUTE_DIRECTIONS_PKEY = Internal.createUniqueKey(NetworkRouteDirections.NETWORK_ROUTE_DIRECTIONS, DSL.name("network_route_directions_pkey"), new TableField[] { NetworkRouteDirections.NETWORK_ROUTE_DIRECTIONS.NETWORK_ROUTE_DIRECTION_ID }, true);
    public static final UniqueKey<NetworkRouteDirectionsStagingRecord> NETWORK_ROUTE_DIRECTIONS_STAGING_PKEY = Internal.createUniqueKey(NetworkRouteDirectionsStaging.NETWORK_ROUTE_DIRECTIONS_STAGING, DSL.name("network_route_directions_staging_pkey"), new TableField[] { NetworkRouteDirectionsStaging.NETWORK_ROUTE_DIRECTIONS_STAGING.NETWORK_ROUTE_DIRECTION_EXT_ID }, true);
    public static final UniqueKey<NetworkRouteLinksRecord> NETWORK_ROUTE_LINKS_PKEY = Internal.createUniqueKey(NetworkRouteLinks.NETWORK_ROUTE_LINKS, DSL.name("network_route_links_pkey"), new TableField[] { NetworkRouteLinks.NETWORK_ROUTE_LINKS.NETWORK_ROUTE_LINK_ID }, true);
    public static final UniqueKey<NetworkRouteLinksStagingRecord> NETWORK_ROUTE_LINKS_STAGING_PKEY = Internal.createUniqueKey(NetworkRouteLinksStaging.NETWORK_ROUTE_LINKS_STAGING, DSL.name("network_route_links_staging_pkey"), new TableField[] { NetworkRouteLinksStaging.NETWORK_ROUTE_LINKS_STAGING.NETWORK_ROUTE_LINK_EXT_ID }, true);
    public static final UniqueKey<NetworkRoutePointsRecord> NETWORK_ROUTE_POINTS_PKEY = Internal.createUniqueKey(NetworkRoutePoints.NETWORK_ROUTE_POINTS, DSL.name("network_route_points_pkey"), new TableField[] { NetworkRoutePoints.NETWORK_ROUTE_POINTS.NETWORK_ROUTE_POINT_ID }, true);
    public static final UniqueKey<NetworkRoutePointsStagingRecord> NETWORK_ROUTE_POINTS_STAGING_PKEY = Internal.createUniqueKey(NetworkRoutePointsStaging.NETWORK_ROUTE_POINTS_STAGING, DSL.name("network_route_points_staging_pkey"), new TableField[] { NetworkRoutePointsStaging.NETWORK_ROUTE_POINTS_STAGING.NETWORK_ROUTE_POINT_EXT_ID }, true);
    public static final UniqueKey<NetworkRouteStopPointsRecord> NETWORK_ROUTE_STOP_POINTS_PKEY = Internal.createUniqueKey(NetworkRouteStopPoints.NETWORK_ROUTE_STOP_POINTS, DSL.name("network_route_stop_points_pkey"), new TableField[] { NetworkRouteStopPoints.NETWORK_ROUTE_STOP_POINTS.NETWORK_ROUTE_POINT_ID }, true);
    public static final UniqueKey<NetworkRouteStopPointsStagingRecord> NETWORK_ROUTE_STOP_POINTS_STAGING_PKEY = Internal.createUniqueKey(NetworkRouteStopPointsStaging.NETWORK_ROUTE_STOP_POINTS_STAGING, DSL.name("network_route_stop_points_staging_pkey"), new TableField[] { NetworkRouteStopPointsStaging.NETWORK_ROUTE_STOP_POINTS_STAGING.NETWORK_ROUTE_STOP_POINT_EXT_ID }, true);
    public static final UniqueKey<NetworkRoutesRecord> NETWORK_ROUTES_PKEY = Internal.createUniqueKey(NetworkRoutes.NETWORK_ROUTES, DSL.name("network_routes_pkey"), new TableField[] { NetworkRoutes.NETWORK_ROUTES.NETWORK_ROUTE_ID }, true);
    public static final UniqueKey<NetworkRoutesStagingRecord> NETWORK_ROUTES_STAGING_PKEY = Internal.createUniqueKey(NetworkRoutesStaging.NETWORK_ROUTES_STAGING, DSL.name("network_routes_staging_pkey"), new TableField[] { NetworkRoutesStaging.NETWORK_ROUTES_STAGING.NETWORK_ROUTE_EXT_ID }, true);
    public static final UniqueKey<ScheduledStopPointsRecord> SCHEDULED_STOP_POINTS_PKEY = Internal.createUniqueKey(ScheduledStopPoints.SCHEDULED_STOP_POINTS, DSL.name("scheduled_stop_points_pkey"), new TableField[] { ScheduledStopPoints.SCHEDULED_STOP_POINTS.SCHEDULED_STOP_POINT_ID }, true);
    public static final UniqueKey<ScheduledStopPointsStagingRecord> SCHEDULED_STOP_POINTS_STAGING_PKEY = Internal.createUniqueKey(ScheduledStopPointsStaging.SCHEDULED_STOP_POINTS_STAGING, DSL.name("scheduled_stop_points_staging_pkey"), new TableField[] { ScheduledStopPointsStaging.SCHEDULED_STOP_POINTS_STAGING.SCHEDULED_STOP_POINT_EXT_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<NetworkLineHeadersRecord, NetworkLinesRecord> NETWORK_LINE_HEADERS__NETWORK_LINE_HEADERS_NETWORK_LINE_ID_FKEY = Internal.createForeignKey(NetworkLineHeaders.NETWORK_LINE_HEADERS, DSL.name("network_line_headers_network_line_id_fkey"), new TableField[] { NetworkLineHeaders.NETWORK_LINE_HEADERS.NETWORK_LINE_ID }, Keys.NETWORK_LINES_PKEY, new TableField[] { NetworkLines.NETWORK_LINES.NETWORK_LINE_ID }, true);
    public static final ForeignKey<NetworkLinesRecord, InfrastructureNetworkTypesRecord> NETWORK_LINES__NETWORK_LINES_INFRASTRUCTURE_NETWORK_TYPE_FKEY = Internal.createForeignKey(NetworkLines.NETWORK_LINES, DSL.name("network_lines_infrastructure_network_type_fkey"), new TableField[] { NetworkLines.NETWORK_LINES.INFRASTRUCTURE_NETWORK_TYPE }, fi.hsl.jore.importer.jooq.infrastructure_network.Keys.INFRASTRUCTURE_NETWORK_TYPES_PKEY, new TableField[] { InfrastructureNetworkTypes.INFRASTRUCTURE_NETWORK_TYPES.INFRASTRUCTURE_NETWORK_TYPE }, true);
    public static final ForeignKey<NetworkLinesStagingRecord, InfrastructureNetworkTypesRecord> NETWORK_LINES_STAGING__NETWORK_LINES_STAGING_INFRASTRUCTURE_NETWORK_TYPE_FKEY = Internal.createForeignKey(NetworkLinesStaging.NETWORK_LINES_STAGING, DSL.name("network_lines_staging_infrastructure_network_type_fkey"), new TableField[] { NetworkLinesStaging.NETWORK_LINES_STAGING.INFRASTRUCTURE_NETWORK_TYPE }, fi.hsl.jore.importer.jooq.infrastructure_network.Keys.INFRASTRUCTURE_NETWORK_TYPES_PKEY, new TableField[] { InfrastructureNetworkTypes.INFRASTRUCTURE_NETWORK_TYPES.INFRASTRUCTURE_NETWORK_TYPE }, true);
    public static final ForeignKey<NetworkRouteDirectionsRecord, NetworkDirectionTypesRecord> NETWORK_ROUTE_DIRECTIONS__NETWORK_ROUTE_DIRECTIONS_NETWORK_ROUTE_DIRECTION_TYPE_FKEY = Internal.createForeignKey(NetworkRouteDirections.NETWORK_ROUTE_DIRECTIONS, DSL.name("network_route_directions_network_route_direction_type_fkey"), new TableField[] { NetworkRouteDirections.NETWORK_ROUTE_DIRECTIONS.NETWORK_ROUTE_DIRECTION_TYPE }, Keys.NETWORK_DIRECTION_TYPES_PKEY, new TableField[] { NetworkDirectionTypes.NETWORK_DIRECTION_TYPES.NETWORK_DIRECTION_TYPE }, true);
    public static final ForeignKey<NetworkRouteDirectionsRecord, NetworkRoutesRecord> NETWORK_ROUTE_DIRECTIONS__NETWORK_ROUTE_DIRECTIONS_NETWORK_ROUTE_ID_FKEY = Internal.createForeignKey(NetworkRouteDirections.NETWORK_ROUTE_DIRECTIONS, DSL.name("network_route_directions_network_route_id_fkey"), new TableField[] { NetworkRouteDirections.NETWORK_ROUTE_DIRECTIONS.NETWORK_ROUTE_ID }, Keys.NETWORK_ROUTES_PKEY, new TableField[] { NetworkRoutes.NETWORK_ROUTES.NETWORK_ROUTE_ID }, true);
    public static final ForeignKey<NetworkRouteDirectionsStagingRecord, NetworkDirectionTypesRecord> NETWORK_ROUTE_DIRECTIONS_STAGING__NETWORK_ROUTE_DIRECTIONS_STAG_NETWORK_ROUTE_DIRECTION_TYPE_FKEY = Internal.createForeignKey(NetworkRouteDirectionsStaging.NETWORK_ROUTE_DIRECTIONS_STAGING, DSL.name("network_route_directions_stag_network_route_direction_type_fkey"), new TableField[] { NetworkRouteDirectionsStaging.NETWORK_ROUTE_DIRECTIONS_STAGING.NETWORK_ROUTE_DIRECTION_TYPE }, Keys.NETWORK_DIRECTION_TYPES_PKEY, new TableField[] { NetworkDirectionTypes.NETWORK_DIRECTION_TYPES.NETWORK_DIRECTION_TYPE }, true);
    public static final ForeignKey<NetworkRouteLinksRecord, InfrastructureLinksRecord> NETWORK_ROUTE_LINKS__NETWORK_ROUTE_LINKS_INFRASTRUCTURE_LINK_ID_FKEY = Internal.createForeignKey(NetworkRouteLinks.NETWORK_ROUTE_LINKS, DSL.name("network_route_links_infrastructure_link_id_fkey"), new TableField[] { NetworkRouteLinks.NETWORK_ROUTE_LINKS.INFRASTRUCTURE_LINK_ID }, fi.hsl.jore.importer.jooq.infrastructure_network.Keys.INFRASTRUCTURE_LINKS_PKEY, new TableField[] { InfrastructureLinks.INFRASTRUCTURE_LINKS.INFRASTRUCTURE_LINK_ID }, true);
    public static final ForeignKey<NetworkRouteLinksRecord, NetworkRouteDirectionsRecord> NETWORK_ROUTE_LINKS__NETWORK_ROUTE_LINKS_NETWORK_ROUTE_DIRECTION_ID_FKEY = Internal.createForeignKey(NetworkRouteLinks.NETWORK_ROUTE_LINKS, DSL.name("network_route_links_network_route_direction_id_fkey"), new TableField[] { NetworkRouteLinks.NETWORK_ROUTE_LINKS.NETWORK_ROUTE_DIRECTION_ID }, Keys.NETWORK_ROUTE_DIRECTIONS_PKEY, new TableField[] { NetworkRouteDirections.NETWORK_ROUTE_DIRECTIONS.NETWORK_ROUTE_DIRECTION_ID }, true);
    public static final ForeignKey<NetworkRoutePointsRecord, InfrastructureNodesRecord> NETWORK_ROUTE_POINTS__NETWORK_ROUTE_POINTS_INFRASTRUCTURE_NODE_FKEY = Internal.createForeignKey(NetworkRoutePoints.NETWORK_ROUTE_POINTS, DSL.name("network_route_points_infrastructure_node_fkey"), new TableField[] { NetworkRoutePoints.NETWORK_ROUTE_POINTS.INFRASTRUCTURE_NODE }, fi.hsl.jore.importer.jooq.infrastructure_network.Keys.INFRASTRUCTURE_NODES_PKEY, new TableField[] { InfrastructureNodes.INFRASTRUCTURE_NODES.INFRASTRUCTURE_NODE_ID }, true);
    public static final ForeignKey<NetworkRoutePointsRecord, NetworkRouteDirectionsRecord> NETWORK_ROUTE_POINTS__NETWORK_ROUTE_POINTS_NETWORK_ROUTE_DIRECTION_ID_FKEY = Internal.createForeignKey(NetworkRoutePoints.NETWORK_ROUTE_POINTS, DSL.name("network_route_points_network_route_direction_id_fkey"), new TableField[] { NetworkRoutePoints.NETWORK_ROUTE_POINTS.NETWORK_ROUTE_DIRECTION_ID }, Keys.NETWORK_ROUTE_DIRECTIONS_PKEY, new TableField[] { NetworkRouteDirections.NETWORK_ROUTE_DIRECTIONS.NETWORK_ROUTE_DIRECTION_ID }, true);
    public static final ForeignKey<NetworkRouteStopPointsRecord, NetworkRoutePointsRecord> NETWORK_ROUTE_STOP_POINTS__NETWORK_ROUTE_STOP_POINTS_NETWORK_ROUTE_POINT_ID_FKEY = Internal.createForeignKey(NetworkRouteStopPoints.NETWORK_ROUTE_STOP_POINTS, DSL.name("network_route_stop_points_network_route_point_id_fkey"), new TableField[] { NetworkRouteStopPoints.NETWORK_ROUTE_STOP_POINTS.NETWORK_ROUTE_POINT_ID }, Keys.NETWORK_ROUTE_POINTS_PKEY, new TableField[] { NetworkRoutePoints.NETWORK_ROUTE_POINTS.NETWORK_ROUTE_POINT_ID }, true);
    public static final ForeignKey<NetworkRoutesRecord, NetworkLinesRecord> NETWORK_ROUTES__NETWORK_ROUTES_NETWORK_LINE_ID_FKEY = Internal.createForeignKey(NetworkRoutes.NETWORK_ROUTES, DSL.name("network_routes_network_line_id_fkey"), new TableField[] { NetworkRoutes.NETWORK_ROUTES.NETWORK_LINE_ID }, Keys.NETWORK_LINES_PKEY, new TableField[] { NetworkLines.NETWORK_LINES.NETWORK_LINE_ID }, true);
    public static final ForeignKey<ScheduledStopPointsRecord, InfrastructureNodesRecord> SCHEDULED_STOP_POINTS__SCHEDULED_STOP_POINTS_INFRASTRUCTURE_NODE_ID_FKEY = Internal.createForeignKey(ScheduledStopPoints.SCHEDULED_STOP_POINTS, DSL.name("scheduled_stop_points_infrastructure_node_id_fkey"), new TableField[] { ScheduledStopPoints.SCHEDULED_STOP_POINTS.INFRASTRUCTURE_NODE_ID }, fi.hsl.jore.importer.jooq.infrastructure_network.Keys.INFRASTRUCTURE_NODES_PKEY, new TableField[] { InfrastructureNodes.INFRASTRUCTURE_NODES.INFRASTRUCTURE_NODE_ID }, true);
}
