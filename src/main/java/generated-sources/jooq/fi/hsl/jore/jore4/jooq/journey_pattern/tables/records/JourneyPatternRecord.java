/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.journey_pattern.tables.records;


import fi.hsl.jore.jore4.jooq.journey_pattern.tables.JourneyPattern;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * The journey patterns, i.e. the ordered lists of stops and timing points 
 * along routes: https://www.transmodel-cen.eu/model/index.htm?goto=2:3:1:813
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JourneyPatternRecord extends UpdatableRecordImpl<JourneyPatternRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>journey_pattern.journey_pattern.journey_pattern_id</code>. The ID of the journey pattern.
     */
    public void setJourneyPatternId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>journey_pattern.journey_pattern.journey_pattern_id</code>. The ID of the journey pattern.
     */
    public UUID getJourneyPatternId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>journey_pattern.journey_pattern.on_route_id</code>. The ID of the route the journey pattern is on.
     */
    public void setOnRouteId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>journey_pattern.journey_pattern.on_route_id</code>. The ID of the route the journey pattern is on.
     */
    public UUID getOnRouteId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return JourneyPattern.JOURNEY_PATTERN_.JOURNEY_PATTERN_ID;
    }

    @Override
    public Field<UUID> field2() {
        return JourneyPattern.JOURNEY_PATTERN_.ON_ROUTE_ID;
    }

    @Override
    public UUID component1() {
        return getJourneyPatternId();
    }

    @Override
    public UUID component2() {
        return getOnRouteId();
    }

    @Override
    public UUID value1() {
        return getJourneyPatternId();
    }

    @Override
    public UUID value2() {
        return getOnRouteId();
    }

    @Override
    public JourneyPatternRecord value1(UUID value) {
        setJourneyPatternId(value);
        return this;
    }

    @Override
    public JourneyPatternRecord value2(UUID value) {
        setOnRouteId(value);
        return this;
    }

    @Override
    public JourneyPatternRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JourneyPatternRecord
     */
    public JourneyPatternRecord() {
        super(JourneyPattern.JOURNEY_PATTERN_);
    }

    /**
     * Create a detached, initialised JourneyPatternRecord
     */
    public JourneyPatternRecord(UUID journeyPatternId, UUID onRouteId) {
        super(JourneyPattern.JOURNEY_PATTERN_);

        setJourneyPatternId(journeyPatternId);
        setOnRouteId(onRouteId);
    }
}
