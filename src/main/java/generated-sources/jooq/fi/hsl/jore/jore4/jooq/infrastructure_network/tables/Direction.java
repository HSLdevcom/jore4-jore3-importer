/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.infrastructure_network.tables;


import fi.hsl.jore.jore4.jooq.infrastructure_network.InfrastructureNetwork;
import fi.hsl.jore.jore4.jooq.infrastructure_network.Keys;
import fi.hsl.jore.jore4.jooq.infrastructure_network.tables.records.DirectionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The direction in which an e.g. infrastructure link can be traversed
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Direction extends TableImpl<DirectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>infrastructure_network.direction</code>
     */
    public static final Direction DIRECTION = new Direction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DirectionRecord> getRecordType() {
        return DirectionRecord.class;
    }

    /**
     * The column <code>infrastructure_network.direction.value</code>.
     */
    public final TableField<DirectionRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    private Direction(Name alias, Table<DirectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Direction(Name alias, Table<DirectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The direction in which an e.g. infrastructure link can be traversed"), TableOptions.table());
    }

    /**
     * Create an aliased <code>infrastructure_network.direction</code> table reference
     */
    public Direction(String alias) {
        this(DSL.name(alias), DIRECTION);
    }

    /**
     * Create an aliased <code>infrastructure_network.direction</code> table reference
     */
    public Direction(Name alias) {
        this(alias, DIRECTION);
    }

    /**
     * Create a <code>infrastructure_network.direction</code> table reference
     */
    public Direction() {
        this(DSL.name("direction"), null);
    }

    public <O extends Record> Direction(Table<O> child, ForeignKey<O, DirectionRecord> key) {
        super(child, key, DIRECTION);
    }

    @Override
    public Schema getSchema() {
        return InfrastructureNetwork.INFRASTRUCTURE_NETWORK;
    }

    @Override
    public UniqueKey<DirectionRecord> getPrimaryKey() {
        return Keys.DIRECTION_PKEY;
    }

    @Override
    public List<UniqueKey<DirectionRecord>> getKeys() {
        return Arrays.<UniqueKey<DirectionRecord>>asList(Keys.DIRECTION_PKEY);
    }

    @Override
    public Direction as(String alias) {
        return new Direction(DSL.name(alias), this);
    }

    @Override
    public Direction as(Name alias) {
        return new Direction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Direction rename(String name) {
        return new Direction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Direction rename(Name name) {
        return new Direction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
