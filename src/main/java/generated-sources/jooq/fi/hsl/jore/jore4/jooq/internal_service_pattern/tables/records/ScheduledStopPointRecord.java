/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.internal_service_pattern.tables.records;


import fi.hsl.jore.jore4.jooq.internal_service_pattern.tables.ScheduledStopPoint;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.locationtech.jts.geom.Point;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScheduledStopPointRecord extends UpdatableRecordImpl<ScheduledStopPointRecord> implements Record5<UUID, Point, UUID, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>internal_service_pattern.scheduled_stop_point.scheduled_stop_point_id</code>.
     */
    public void setScheduledStopPointId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>internal_service_pattern.scheduled_stop_point.scheduled_stop_point_id</code>.
     */
    public UUID getScheduledStopPointId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>internal_service_pattern.scheduled_stop_point.measured_location</code>.
     */
    public void setMeasuredLocation(Point value) {
        set(1, value);
    }

    /**
     * Getter for <code>internal_service_pattern.scheduled_stop_point.measured_location</code>.
     */
    public Point getMeasuredLocation() {
        return (Point) get(1);
    }

    /**
     * Setter for <code>internal_service_pattern.scheduled_stop_point.located_on_infrastructure_link_id</code>.
     */
    public void setLocatedOnInfrastructureLinkId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>internal_service_pattern.scheduled_stop_point.located_on_infrastructure_link_id</code>.
     */
    public UUID getLocatedOnInfrastructureLinkId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>internal_service_pattern.scheduled_stop_point.direction</code>.
     */
    public void setDirection(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>internal_service_pattern.scheduled_stop_point.direction</code>.
     */
    public String getDirection() {
        return (String) get(3);
    }

    /**
     * Setter for <code>internal_service_pattern.scheduled_stop_point.label</code>.
     */
    public void setLabel(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>internal_service_pattern.scheduled_stop_point.label</code>.
     */
    public String getLabel() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, Point, UUID, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, Point, UUID, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return ScheduledStopPoint.SCHEDULED_STOP_POINT.SCHEDULED_STOP_POINT_ID;
    }

    @Override
    public Field<Point> field2() {
        return ScheduledStopPoint.SCHEDULED_STOP_POINT.MEASURED_LOCATION;
    }

    @Override
    public Field<UUID> field3() {
        return ScheduledStopPoint.SCHEDULED_STOP_POINT.LOCATED_ON_INFRASTRUCTURE_LINK_ID;
    }

    @Override
    public Field<String> field4() {
        return ScheduledStopPoint.SCHEDULED_STOP_POINT.DIRECTION;
    }

    @Override
    public Field<String> field5() {
        return ScheduledStopPoint.SCHEDULED_STOP_POINT.LABEL;
    }

    @Override
    public UUID component1() {
        return getScheduledStopPointId();
    }

    @Override
    public Point component2() {
        return getMeasuredLocation();
    }

    @Override
    public UUID component3() {
        return getLocatedOnInfrastructureLinkId();
    }

    @Override
    public String component4() {
        return getDirection();
    }

    @Override
    public String component5() {
        return getLabel();
    }

    @Override
    public UUID value1() {
        return getScheduledStopPointId();
    }

    @Override
    public Point value2() {
        return getMeasuredLocation();
    }

    @Override
    public UUID value3() {
        return getLocatedOnInfrastructureLinkId();
    }

    @Override
    public String value4() {
        return getDirection();
    }

    @Override
    public String value5() {
        return getLabel();
    }

    @Override
    public ScheduledStopPointRecord value1(UUID value) {
        setScheduledStopPointId(value);
        return this;
    }

    @Override
    public ScheduledStopPointRecord value2(Point value) {
        setMeasuredLocation(value);
        return this;
    }

    @Override
    public ScheduledStopPointRecord value3(UUID value) {
        setLocatedOnInfrastructureLinkId(value);
        return this;
    }

    @Override
    public ScheduledStopPointRecord value4(String value) {
        setDirection(value);
        return this;
    }

    @Override
    public ScheduledStopPointRecord value5(String value) {
        setLabel(value);
        return this;
    }

    @Override
    public ScheduledStopPointRecord values(UUID value1, Point value2, UUID value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ScheduledStopPointRecord
     */
    public ScheduledStopPointRecord() {
        super(ScheduledStopPoint.SCHEDULED_STOP_POINT);
    }

    /**
     * Create a detached, initialised ScheduledStopPointRecord
     */
    public ScheduledStopPointRecord(UUID scheduledStopPointId, Point measuredLocation, UUID locatedOnInfrastructureLinkId, String direction, String label) {
        super(ScheduledStopPoint.SCHEDULED_STOP_POINT);

        setScheduledStopPointId(scheduledStopPointId);
        setMeasuredLocation(measuredLocation);
        setLocatedOnInfrastructureLinkId(locatedOnInfrastructureLinkId);
        setDirection(direction);
        setLabel(label);
    }
}
