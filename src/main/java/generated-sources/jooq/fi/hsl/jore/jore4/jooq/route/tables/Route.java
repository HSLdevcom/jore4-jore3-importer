/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.route.tables;


import fi.hsl.jore.jore4.jooq.route.tables.records.RouteRecord;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The routes from Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:1:3:483
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Route extends TableImpl<RouteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>route.route</code>
     */
    public static final Route ROUTE_ = new Route();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RouteRecord> getRecordType() {
        return RouteRecord.class;
    }

    /**
     * The column <code>route.route.route_id</code>. The ID of the route.
     */
    public final TableField<RouteRecord, UUID> ROUTE_ID = createField(DSL.name("route_id"), SQLDataType.UUID, this, "The ID of the route.");

    /**
     * The column <code>route.route.description_i18n</code>. The description of the route in the form of starting location - destination. Placeholder for multilingual strings.
     */
    public final TableField<RouteRecord, String> DESCRIPTION_I18N = createField(DSL.name("description_i18n"), SQLDataType.CLOB, this, "The description of the route in the form of starting location - destination. Placeholder for multilingual strings.");

    /**
     * The column <code>route.route.starts_from_scheduled_stop_point_id</code>. The scheduled stop point where the route starts from.
     */
    public final TableField<RouteRecord, UUID> STARTS_FROM_SCHEDULED_STOP_POINT_ID = createField(DSL.name("starts_from_scheduled_stop_point_id"), SQLDataType.UUID, this, "The scheduled stop point where the route starts from.");

    /**
     * The column <code>route.route.ends_at_scheduled_stop_point_id</code>. The scheduled stop point where the route ends at.
     */
    public final TableField<RouteRecord, UUID> ENDS_AT_SCHEDULED_STOP_POINT_ID = createField(DSL.name("ends_at_scheduled_stop_point_id"), SQLDataType.UUID, this, "The scheduled stop point where the route ends at.");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<RouteRecord, Object> ROUTE_SHAPE = createField(DSL.name("route_shape"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geography\""), this, "A PostGIS LinestringZ geography in EPSG:4326 describing the shape of the route.");

    /**
     * The column <code>route.route.on_line_id</code>. The line to which this route belongs.
     */
    public final TableField<RouteRecord, UUID> ON_LINE_ID = createField(DSL.name("on_line_id"), SQLDataType.UUID, this, "The line to which this route belongs.");

    /**
     * The column <code>route.route.validity_start</code>. The point in time when the route becomes valid. If NULL, the route has been always valid.
     */
    public final TableField<RouteRecord, LocalDateTime> VALIDITY_START = createField(DSL.name("validity_start"), SQLDataType.LOCALDATETIME(6), this, "The point in time when the route becomes valid. If NULL, the route has been always valid.");

    /**
     * The column <code>route.route.validity_end</code>. The point in time from which onwards the route is no longer valid. If NULL, the route will be always valid.
     */
    public final TableField<RouteRecord, LocalDateTime> VALIDITY_END = createField(DSL.name("validity_end"), SQLDataType.LOCALDATETIME(6), this, "The point in time from which onwards the route is no longer valid. If NULL, the route will be always valid.");

    /**
     * The column <code>route.route.priority</code>. The priority of the route definition. The definition may be overridden by higher priority definitions.
     */
    public final TableField<RouteRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER, this, "The priority of the route definition. The definition may be overridden by higher priority definitions.");

    private Route(Name alias, Table<RouteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Route(Name alias, Table<RouteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The routes from Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:1:3:483"), TableOptions.view("create view \"route\" as  SELECT r.route_id,\n    r.description_i18n,\n    r.starts_from_scheduled_stop_point_id,\n    r.ends_at_scheduled_stop_point_id,\n    (st_linemerge(st_collect(\n        CASE\n            WHEN ilar.is_traversal_forwards THEN (il.shape)::geometry\n            ELSE st_reverse((il.shape)::geometry)\n        END)))::geography AS route_shape,\n    r.on_line_id,\n    r.validity_start,\n    r.validity_end,\n    r.priority\n   FROM (internal_route.route r\n     LEFT JOIN (route.infrastructure_link_along_route ilar\n     JOIN infrastructure_network.infrastructure_link il ON ((ilar.infrastructure_link_id = il.infrastructure_link_id))) ON ((r.route_id = ilar.route_id)))\n  GROUP BY r.route_id;"));
    }

    /**
     * Create an aliased <code>route.route</code> table reference
     */
    public Route(String alias) {
        this(DSL.name(alias), ROUTE_);
    }

    /**
     * Create an aliased <code>route.route</code> table reference
     */
    public Route(Name alias) {
        this(alias, ROUTE_);
    }

    /**
     * Create a <code>route.route</code> table reference
     */
    public Route() {
        this(DSL.name("route"), null);
    }

    public <O extends Record> Route(Table<O> child, ForeignKey<O, RouteRecord> key) {
        super(child, key, ROUTE_);
    }

    @Override
    public Schema getSchema() {
        return fi.hsl.jore.jore4.jooq.route.Route.ROUTE;
    }

    @Override
    public Route as(String alias) {
        return new Route(DSL.name(alias), this);
    }

    @Override
    public Route as(Name alias) {
        return new Route(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(String name) {
        return new Route(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(Name name) {
        return new Route(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, String, UUID, UUID, Object, UUID, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
