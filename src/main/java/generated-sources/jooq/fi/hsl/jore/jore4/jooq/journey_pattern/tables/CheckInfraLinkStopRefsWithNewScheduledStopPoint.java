/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.journey_pattern.tables;


import fi.hsl.jore.jore4.jooq.journey_pattern.JourneyPattern;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CheckInfraLinkStopRefsWithNewScheduledStopPoint extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>journey_pattern.check_infra_link_stop_refs_with_new_scheduled_stop_point</code>
     */
    public static final CheckInfraLinkStopRefsWithNewScheduledStopPoint CHECK_INFRA_LINK_STOP_REFS_WITH_NEW_SCHEDULED_STOP_POINT = new CheckInfraLinkStopRefsWithNewScheduledStopPoint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>journey_pattern.check_infra_link_stop_refs_with_new_scheduled_stop_point.journey_pattern_id</code>.
     */
    public final TableField<Record, UUID> JOURNEY_PATTERN_ID = createField(DSL.name("journey_pattern_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>journey_pattern.check_infra_link_stop_refs_with_new_scheduled_stop_point.on_route_id</code>.
     */
    public final TableField<Record, UUID> ON_ROUTE_ID = createField(DSL.name("on_route_id"), SQLDataType.UUID.nullable(false), this, "");

    private CheckInfraLinkStopRefsWithNewScheduledStopPoint(Name alias, Table<Record> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.UUID),
            DSL.val(null, SQLDataType.UUID),
            DSL.val(null, org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geography\"")),
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
            DSL.val(null, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
            DSL.val(null, SQLDataType.INTEGER)
        });
    }

    private CheckInfraLinkStopRefsWithNewScheduledStopPoint(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased
     * <code>journey_pattern.check_infra_link_stop_refs_with_new_scheduled_stop_point</code>
     * table reference
     */
    public CheckInfraLinkStopRefsWithNewScheduledStopPoint(String alias) {
        this(DSL.name(alias), CHECK_INFRA_LINK_STOP_REFS_WITH_NEW_SCHEDULED_STOP_POINT);
    }

    /**
     * Create an aliased
     * <code>journey_pattern.check_infra_link_stop_refs_with_new_scheduled_stop_point</code>
     * table reference
     */
    public CheckInfraLinkStopRefsWithNewScheduledStopPoint(Name alias) {
        this(alias, CHECK_INFRA_LINK_STOP_REFS_WITH_NEW_SCHEDULED_STOP_POINT);
    }

    /**
     * Create a
     * <code>journey_pattern.check_infra_link_stop_refs_with_new_scheduled_stop_point</code>
     * table reference
     */
    public CheckInfraLinkStopRefsWithNewScheduledStopPoint() {
        this(DSL.name("check_infra_link_stop_refs_with_new_scheduled_stop_point"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JourneyPattern.JOURNEY_PATTERN;
    }

    @Override
    public CheckInfraLinkStopRefsWithNewScheduledStopPoint as(String alias) {
        return new CheckInfraLinkStopRefsWithNewScheduledStopPoint(DSL.name(alias), this, parameters);
    }

    @Override
    public CheckInfraLinkStopRefsWithNewScheduledStopPoint as(Name alias) {
        return new CheckInfraLinkStopRefsWithNewScheduledStopPoint(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckInfraLinkStopRefsWithNewScheduledStopPoint rename(String name) {
        return new CheckInfraLinkStopRefsWithNewScheduledStopPoint(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckInfraLinkStopRefsWithNewScheduledStopPoint rename(Name name) {
        return new CheckInfraLinkStopRefsWithNewScheduledStopPoint(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public CheckInfraLinkStopRefsWithNewScheduledStopPoint call(
          UUID replaceScheduledStopPointId
        , UUID newLocatedOnInfrastructureLinkId
        , Object newMeasuredLocation
        , String newDirection
        , String newLabel
        , OffsetDateTime newValidityStart
        , OffsetDateTime newValidityEnd
        , Integer newPriority
    ) {
        CheckInfraLinkStopRefsWithNewScheduledStopPoint result = new CheckInfraLinkStopRefsWithNewScheduledStopPoint(DSL.name("check_infra_link_stop_refs_with_new_scheduled_stop_point"), null, new Field[] {
            DSL.val(replaceScheduledStopPointId, SQLDataType.UUID),
            DSL.val(newLocatedOnInfrastructureLinkId, SQLDataType.UUID),
            DSL.val(newMeasuredLocation, org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geography\"")),
            DSL.val(newDirection, SQLDataType.CLOB),
            DSL.val(newLabel, SQLDataType.CLOB),
            DSL.val(newValidityStart, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
            DSL.val(newValidityEnd, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
            DSL.val(newPriority, SQLDataType.INTEGER)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public CheckInfraLinkStopRefsWithNewScheduledStopPoint call(
          Field<UUID> replaceScheduledStopPointId
        , Field<UUID> newLocatedOnInfrastructureLinkId
        , Field<Object> newMeasuredLocation
        , Field<String> newDirection
        , Field<String> newLabel
        , Field<OffsetDateTime> newValidityStart
        , Field<OffsetDateTime> newValidityEnd
        , Field<Integer> newPriority
    ) {
        CheckInfraLinkStopRefsWithNewScheduledStopPoint result = new CheckInfraLinkStopRefsWithNewScheduledStopPoint(DSL.name("check_infra_link_stop_refs_with_new_scheduled_stop_point"), null, new Field[] {
            replaceScheduledStopPointId,
            newLocatedOnInfrastructureLinkId,
            newMeasuredLocation,
            newDirection,
            newLabel,
            newValidityStart,
            newValidityEnd,
            newPriority
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
