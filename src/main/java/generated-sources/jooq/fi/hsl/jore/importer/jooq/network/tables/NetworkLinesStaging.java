/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.importer.jooq.network.tables;


import fi.hsl.jore.importer.jooq.infrastructure_network.tables.InfrastructureNetworkTypes;
import fi.hsl.jore.importer.jooq.network.Keys;
import fi.hsl.jore.importer.jooq.network.Network;
import fi.hsl.jore.importer.jooq.network.tables.records.NetworkLinesStagingRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NetworkLinesStaging extends TableImpl<NetworkLinesStagingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>network.network_lines_staging</code>
     */
    public static final NetworkLinesStaging NETWORK_LINES_STAGING = new NetworkLinesStaging();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NetworkLinesStagingRecord> getRecordType() {
        return NetworkLinesStagingRecord.class;
    }

    /**
     * The column
     * <code>network.network_lines_staging.network_line_ext_id</code>.
     */
    public final TableField<NetworkLinesStagingRecord, String> NETWORK_LINE_EXT_ID = createField(DSL.name("network_line_ext_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>network.network_lines_staging.network_line_number</code>.
     */
    public final TableField<NetworkLinesStagingRecord, String> NETWORK_LINE_NUMBER = createField(DSL.name("network_line_number"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>network.network_lines_staging.infrastructure_network_type</code>.
     */
    public final TableField<NetworkLinesStagingRecord, String> INFRASTRUCTURE_NETWORK_TYPE = createField(DSL.name("infrastructure_network_type"), SQLDataType.CLOB.nullable(false), this, "");

    private NetworkLinesStaging(Name alias, Table<NetworkLinesStagingRecord> aliased) {
        this(alias, aliased, null);
    }

    private NetworkLinesStaging(Name alias, Table<NetworkLinesStagingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>network.network_lines_staging</code> table
     * reference
     */
    public NetworkLinesStaging(String alias) {
        this(DSL.name(alias), NETWORK_LINES_STAGING);
    }

    /**
     * Create an aliased <code>network.network_lines_staging</code> table
     * reference
     */
    public NetworkLinesStaging(Name alias) {
        this(alias, NETWORK_LINES_STAGING);
    }

    /**
     * Create a <code>network.network_lines_staging</code> table reference
     */
    public NetworkLinesStaging() {
        this(DSL.name("network_lines_staging"), null);
    }

    public <O extends Record> NetworkLinesStaging(Table<O> child, ForeignKey<O, NetworkLinesStagingRecord> key) {
        super(child, key, NETWORK_LINES_STAGING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Network.NETWORK;
    }

    @Override
    public UniqueKey<NetworkLinesStagingRecord> getPrimaryKey() {
        return Keys.NETWORK_LINES_STAGING_PKEY;
    }

    @Override
    public List<ForeignKey<NetworkLinesStagingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NETWORK_LINES_STAGING__NETWORK_LINES_STAGING_INFRASTRUCTURE_NETWORK_TYPE_FKEY);
    }

    private transient InfrastructureNetworkTypes _infrastructureNetworkTypes;

    public InfrastructureNetworkTypes infrastructureNetworkTypes() {
        if (_infrastructureNetworkTypes == null)
            _infrastructureNetworkTypes = new InfrastructureNetworkTypes(this, Keys.NETWORK_LINES_STAGING__NETWORK_LINES_STAGING_INFRASTRUCTURE_NETWORK_TYPE_FKEY);

        return _infrastructureNetworkTypes;
    }

    @Override
    public NetworkLinesStaging as(String alias) {
        return new NetworkLinesStaging(DSL.name(alias), this);
    }

    @Override
    public NetworkLinesStaging as(Name alias) {
        return new NetworkLinesStaging(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NetworkLinesStaging rename(String name) {
        return new NetworkLinesStaging(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NetworkLinesStaging rename(Name name) {
        return new NetworkLinesStaging(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
