/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.route.tables;


import fi.hsl.jore.jore4.jooq.route.Route;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The route directions from Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:1:3:480
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Direction extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>route.direction</code>
     */
    public static final Direction DIRECTION = new Direction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>route.direction.direction</code>. The name of the route direction.
     */
    public final TableField<Record, String> DIRECTION_ = createField(DSL.name("direction"), SQLDataType.CLOB.nullable(false), this, "The name of the route direction.");

    /**
     * The column <code>route.direction.the_opposite_of_direction</code>. The opposite direction.
     */
    public final TableField<Record, String> THE_OPPOSITE_OF_DIRECTION = createField(DSL.name("the_opposite_of_direction"), SQLDataType.CLOB, this, "The opposite direction.");

    private Direction(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Direction(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The route directions from Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:1:3:480"), TableOptions.table());
    }

    /**
     * Create an aliased <code>route.direction</code> table reference
     */
    public Direction(String alias) {
        this(DSL.name(alias), DIRECTION);
    }

    /**
     * Create an aliased <code>route.direction</code> table reference
     */
    public Direction(Name alias) {
        this(alias, DIRECTION);
    }

    /**
     * Create a <code>route.direction</code> table reference
     */
    public Direction() {
        this(DSL.name("direction"), null);
    }

    public <O extends Record> Direction(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, DIRECTION);
    }

    @Override
    public Schema getSchema() {
        return Route.ROUTE;
    }

    @Override
    public Direction as(String alias) {
        return new Direction(DSL.name(alias), this);
    }

    @Override
    public Direction as(Name alias) {
        return new Direction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Direction rename(String name) {
        return new Direction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Direction rename(Name name) {
        return new Direction(name, null);
    }
}
