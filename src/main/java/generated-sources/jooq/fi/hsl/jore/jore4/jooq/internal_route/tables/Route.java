/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.internal_route.tables;


import fi.hsl.jore.jore4.jooq.internal_route.InternalRoute;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Route extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>internal_route.route</code>
     */
    public static final Route ROUTE = new Route();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>internal_route.route.route_id</code>.
     */
    public final TableField<Record, UUID> ROUTE_ID = createField(DSL.name("route_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>internal_route.route.description_i18n</code>.
     */
    public final TableField<Record, String> DESCRIPTION_I18N = createField(DSL.name("description_i18n"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>internal_route.route.starts_from_scheduled_stop_point_id</code>.
     */
    public final TableField<Record, UUID> STARTS_FROM_SCHEDULED_STOP_POINT_ID = createField(DSL.name("starts_from_scheduled_stop_point_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>internal_route.route.ends_at_scheduled_stop_point_id</code>.
     */
    public final TableField<Record, UUID> ENDS_AT_SCHEDULED_STOP_POINT_ID = createField(DSL.name("ends_at_scheduled_stop_point_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>internal_route.route.on_line_id</code>.
     */
    public final TableField<Record, UUID> ON_LINE_ID = createField(DSL.name("on_line_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>internal_route.route.validity_start</code>.
     */
    public final TableField<Record, OffsetDateTime> VALIDITY_START = createField(DSL.name("validity_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>internal_route.route.validity_end</code>.
     */
    public final TableField<Record, OffsetDateTime> VALIDITY_END = createField(DSL.name("validity_end"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>internal_route.route.priority</code>.
     */
    public final TableField<Record, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>internal_route.route.label</code>.
     */
    public final TableField<Record, String> LABEL = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>internal_route.route.direction</code>.
     */
    public final TableField<Record, String> DIRECTION = createField(DSL.name("direction"), SQLDataType.CLOB.nullable(false), this, "");

    private Route(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Route(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>internal_route.route</code> table reference
     */
    public Route(String alias) {
        this(DSL.name(alias), ROUTE);
    }

    /**
     * Create an aliased <code>internal_route.route</code> table reference
     */
    public Route(Name alias) {
        this(alias, ROUTE);
    }

    /**
     * Create a <code>internal_route.route</code> table reference
     */
    public Route() {
        this(DSL.name("route"), null);
    }

    public <O extends Record> Route(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, ROUTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InternalRoute.INTERNAL_ROUTE;
    }

    @Override
    public Route as(String alias) {
        return new Route(DSL.name(alias), this);
    }

    @Override
    public Route as(Name alias) {
        return new Route(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(String name) {
        return new Route(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(Name name) {
        return new Route(name, null);
    }
}
