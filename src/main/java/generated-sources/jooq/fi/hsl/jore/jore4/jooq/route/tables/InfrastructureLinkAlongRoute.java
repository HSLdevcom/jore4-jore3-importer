/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.route.tables;


import fi.hsl.jore.jore4.jooq.infrastructure_network.tables.InfrastructureLink;
import fi.hsl.jore.jore4.jooq.route.Keys;
import fi.hsl.jore.jore4.jooq.route.Route;
import fi.hsl.jore.jore4.jooq.route.tables.records.InfrastructureLinkAlongRouteRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The infrastructure links along which the routes are defined.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InfrastructureLinkAlongRoute extends TableImpl<InfrastructureLinkAlongRouteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>route.infrastructure_link_along_route</code>
     */
    public static final InfrastructureLinkAlongRoute INFRASTRUCTURE_LINK_ALONG_ROUTE = new InfrastructureLinkAlongRoute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InfrastructureLinkAlongRouteRecord> getRecordType() {
        return InfrastructureLinkAlongRouteRecord.class;
    }

    /**
     * The column <code>route.infrastructure_link_along_route.route_id</code>. The ID of the route.
     */
    public final TableField<InfrastructureLinkAlongRouteRecord, UUID> ROUTE_ID = createField(DSL.name("route_id"), SQLDataType.UUID.nullable(false), this, "The ID of the route.");

    /**
     * The column <code>route.infrastructure_link_along_route.infrastructure_link_id</code>. The ID of the infrastructure link.
     */
    public final TableField<InfrastructureLinkAlongRouteRecord, UUID> INFRASTRUCTURE_LINK_ID = createField(DSL.name("infrastructure_link_id"), SQLDataType.UUID.nullable(false), this, "The ID of the infrastructure link.");

    /**
     * The column <code>route.infrastructure_link_along_route.infrastructure_link_sequence</code>. The order of the infrastructure link within the journey pattern.
     */
    public final TableField<InfrastructureLinkAlongRouteRecord, Integer> INFRASTRUCTURE_LINK_SEQUENCE = createField(DSL.name("infrastructure_link_sequence"), SQLDataType.INTEGER.nullable(false), this, "The order of the infrastructure link within the journey pattern.");

    /**
     * The column <code>route.infrastructure_link_along_route.is_traversal_forwards</code>. Is the infrastructure link traversed in the direction of its linestring?
     */
    public final TableField<InfrastructureLinkAlongRouteRecord, Boolean> IS_TRAVERSAL_FORWARDS = createField(DSL.name("is_traversal_forwards"), SQLDataType.BOOLEAN.nullable(false), this, "Is the infrastructure link traversed in the direction of its linestring?");

    private InfrastructureLinkAlongRoute(Name alias, Table<InfrastructureLinkAlongRouteRecord> aliased) {
        this(alias, aliased, null);
    }

    private InfrastructureLinkAlongRoute(Name alias, Table<InfrastructureLinkAlongRouteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The infrastructure links along which the routes are defined."), TableOptions.table());
    }

    /**
     * Create an aliased <code>route.infrastructure_link_along_route</code> table reference
     */
    public InfrastructureLinkAlongRoute(String alias) {
        this(DSL.name(alias), INFRASTRUCTURE_LINK_ALONG_ROUTE);
    }

    /**
     * Create an aliased <code>route.infrastructure_link_along_route</code> table reference
     */
    public InfrastructureLinkAlongRoute(Name alias) {
        this(alias, INFRASTRUCTURE_LINK_ALONG_ROUTE);
    }

    /**
     * Create a <code>route.infrastructure_link_along_route</code> table reference
     */
    public InfrastructureLinkAlongRoute() {
        this(DSL.name("infrastructure_link_along_route"), null);
    }

    public <O extends Record> InfrastructureLinkAlongRoute(Table<O> child, ForeignKey<O, InfrastructureLinkAlongRouteRecord> key) {
        super(child, key, INFRASTRUCTURE_LINK_ALONG_ROUTE);
    }

    @Override
    public Schema getSchema() {
        return Route.ROUTE;
    }

    @Override
    public UniqueKey<InfrastructureLinkAlongRouteRecord> getPrimaryKey() {
        return Keys.INFRASTRUCTURE_LINK_ALONG_ROUTE_PKEY;
    }

    @Override
    public List<UniqueKey<InfrastructureLinkAlongRouteRecord>> getKeys() {
        return Arrays.<UniqueKey<InfrastructureLinkAlongRouteRecord>>asList(Keys.INFRASTRUCTURE_LINK_ALONG_ROUTE_PKEY);
    }

    @Override
    public List<ForeignKey<InfrastructureLinkAlongRouteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InfrastructureLinkAlongRouteRecord, ?>>asList(Keys.INFRASTRUCTURE_LINK_ALONG_ROUTE__INFRASTRUCTURE_LINK_ALONG_ROUTE_ROUTE_ID_FKEY, Keys.INFRASTRUCTURE_LINK_ALONG_ROUTE__INFRASTRUCTURE_LINK_ALONG_ROUTE_INFRASTRUCTURE_LINK_ID_FKEY);
    }

    private transient fi.hsl.jore.jore4.jooq.internal_route.tables.Route _route;
    private transient InfrastructureLink _infrastructureLink;

    public fi.hsl.jore.jore4.jooq.internal_route.tables.Route route() {
        if (_route == null)
            _route = new fi.hsl.jore.jore4.jooq.internal_route.tables.Route(this, Keys.INFRASTRUCTURE_LINK_ALONG_ROUTE__INFRASTRUCTURE_LINK_ALONG_ROUTE_ROUTE_ID_FKEY);

        return _route;
    }

    public InfrastructureLink infrastructureLink() {
        if (_infrastructureLink == null)
            _infrastructureLink = new InfrastructureLink(this, Keys.INFRASTRUCTURE_LINK_ALONG_ROUTE__INFRASTRUCTURE_LINK_ALONG_ROUTE_INFRASTRUCTURE_LINK_ID_FKEY);

        return _infrastructureLink;
    }

    @Override
    public InfrastructureLinkAlongRoute as(String alias) {
        return new InfrastructureLinkAlongRoute(DSL.name(alias), this);
    }

    @Override
    public InfrastructureLinkAlongRoute as(Name alias) {
        return new InfrastructureLinkAlongRoute(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureLinkAlongRoute rename(String name) {
        return new InfrastructureLinkAlongRoute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InfrastructureLinkAlongRoute rename(Name name) {
        return new InfrastructureLinkAlongRoute(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, Integer, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
