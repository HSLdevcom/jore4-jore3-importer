/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.route.tables.records;


import fi.hsl.jore.jore4.jooq.route.tables.Direction;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * The route directions from Transmodel: https://www.transmodel-cen.eu/model/index.htm?goto=2:1:3:480
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DirectionRecord extends UpdatableRecordImpl<DirectionRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>route.direction.direction</code>. The name of the route direction.
     */
    public void setDirection(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>route.direction.direction</code>. The name of the route direction.
     */
    public String getDirection() {
        return (String) get(0);
    }

    /**
     * Setter for <code>route.direction.the_opposite_of_direction</code>. The opposite direction.
     */
    public void setTheOppositeOfDirection(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>route.direction.the_opposite_of_direction</code>. The opposite direction.
     */
    public String getTheOppositeOfDirection() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Direction.DIRECTION.DIRECTION_;
    }

    @Override
    public Field<String> field2() {
        return Direction.DIRECTION.THE_OPPOSITE_OF_DIRECTION;
    }

    @Override
    public String component1() {
        return getDirection();
    }

    @Override
    public String component2() {
        return getTheOppositeOfDirection();
    }

    @Override
    public String value1() {
        return getDirection();
    }

    @Override
    public String value2() {
        return getTheOppositeOfDirection();
    }

    @Override
    public DirectionRecord value1(String value) {
        setDirection(value);
        return this;
    }

    @Override
    public DirectionRecord value2(String value) {
        setTheOppositeOfDirection(value);
        return this;
    }

    @Override
    public DirectionRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DirectionRecord
     */
    public DirectionRecord() {
        super(Direction.DIRECTION);
    }

    /**
     * Create a detached, initialised DirectionRecord
     */
    public DirectionRecord(String direction, String theOppositeOfDirection) {
        super(Direction.DIRECTION);

        setDirection(direction);
        setTheOppositeOfDirection(theOppositeOfDirection);
    }
}
