/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.infrastructure_network.tables;


import fi.hsl.jore.jore4.jooq.infrastructure_network.InfrastructureNetwork;
import fi.hsl.jore.jore4.jooq.infrastructure_network.Keys;
import fi.hsl.jore.jore4.jooq.infrastructure_network.tables.records.ExternalSourceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * An external source from which infrastructure network parts are imported
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExternalSource extends TableImpl<ExternalSourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>infrastructure_network.external_source</code>
     */
    public static final ExternalSource EXTERNAL_SOURCE = new ExternalSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExternalSourceRecord> getRecordType() {
        return ExternalSourceRecord.class;
    }

    /**
     * The column <code>infrastructure_network.external_source.value</code>.
     */
    public final TableField<ExternalSourceRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    private ExternalSource(Name alias, Table<ExternalSourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExternalSource(Name alias, Table<ExternalSourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("An external source from which infrastructure network parts are imported"), TableOptions.table());
    }

    /**
     * Create an aliased <code>infrastructure_network.external_source</code> table reference
     */
    public ExternalSource(String alias) {
        this(DSL.name(alias), EXTERNAL_SOURCE);
    }

    /**
     * Create an aliased <code>infrastructure_network.external_source</code> table reference
     */
    public ExternalSource(Name alias) {
        this(alias, EXTERNAL_SOURCE);
    }

    /**
     * Create a <code>infrastructure_network.external_source</code> table reference
     */
    public ExternalSource() {
        this(DSL.name("external_source"), null);
    }

    public <O extends Record> ExternalSource(Table<O> child, ForeignKey<O, ExternalSourceRecord> key) {
        super(child, key, EXTERNAL_SOURCE);
    }

    @Override
    public Schema getSchema() {
        return InfrastructureNetwork.INFRASTRUCTURE_NETWORK;
    }

    @Override
    public UniqueKey<ExternalSourceRecord> getPrimaryKey() {
        return Keys.EXTERNAL_SOURCE_PKEY;
    }

    @Override
    public List<UniqueKey<ExternalSourceRecord>> getKeys() {
        return Arrays.<UniqueKey<ExternalSourceRecord>>asList(Keys.EXTERNAL_SOURCE_PKEY);
    }

    @Override
    public ExternalSource as(String alias) {
        return new ExternalSource(DSL.name(alias), this);
    }

    @Override
    public ExternalSource as(Name alias) {
        return new ExternalSource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalSource rename(String name) {
        return new ExternalSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalSource rename(Name name) {
        return new ExternalSource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
