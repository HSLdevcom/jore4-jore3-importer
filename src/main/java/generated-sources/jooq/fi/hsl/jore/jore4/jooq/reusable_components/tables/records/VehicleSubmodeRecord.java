/*
 * This file is generated by jOOQ.
 */
package fi.hsl.jore.jore4.jooq.reusable_components.tables.records;


import fi.hsl.jore.jore4.jooq.reusable_components.tables.VehicleSubmode;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * The vehicle submode, which may have implications on which infrastructure 
 * links the vehicle can traverse
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VehicleSubmodeRecord extends UpdatableRecordImpl<VehicleSubmodeRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>reusable_components.vehicle_submode.vehicle_submode</code>. The vehicle submode, which may have implications on which infrastructure links the vehicle can traverse
     */
    public void setVehicleSubmode(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>reusable_components.vehicle_submode.vehicle_submode</code>. The vehicle submode, which may have implications on which infrastructure links the vehicle can traverse
     */
    public String getVehicleSubmode() {
        return (String) get(0);
    }

    /**
     * Setter for <code>reusable_components.vehicle_submode.belonging_to_vehicle_mode</code>. The vehicle mode the vehicle submode belongs to: https://www.transmodel-cen.eu/model/index.htm?goto=1:6:1:283
     */
    public void setBelongingToVehicleMode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>reusable_components.vehicle_submode.belonging_to_vehicle_mode</code>. The vehicle mode the vehicle submode belongs to: https://www.transmodel-cen.eu/model/index.htm?goto=1:6:1:283
     */
    public String getBelongingToVehicleMode() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return VehicleSubmode.VEHICLE_SUBMODE.VEHICLE_SUBMODE_;
    }

    @Override
    public Field<String> field2() {
        return VehicleSubmode.VEHICLE_SUBMODE.BELONGING_TO_VEHICLE_MODE;
    }

    @Override
    public String component1() {
        return getVehicleSubmode();
    }

    @Override
    public String component2() {
        return getBelongingToVehicleMode();
    }

    @Override
    public String value1() {
        return getVehicleSubmode();
    }

    @Override
    public String value2() {
        return getBelongingToVehicleMode();
    }

    @Override
    public VehicleSubmodeRecord value1(String value) {
        setVehicleSubmode(value);
        return this;
    }

    @Override
    public VehicleSubmodeRecord value2(String value) {
        setBelongingToVehicleMode(value);
        return this;
    }

    @Override
    public VehicleSubmodeRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached VehicleSubmodeRecord
     */
    public VehicleSubmodeRecord() {
        super(VehicleSubmode.VEHICLE_SUBMODE);
    }

    /**
     * Create a detached, initialised VehicleSubmodeRecord
     */
    public VehicleSubmodeRecord(String vehicleSubmode, String belongingToVehicleMode) {
        super(VehicleSubmode.VEHICLE_SUBMODE);

        setVehicleSubmode(vehicleSubmode);
        setBelongingToVehicleMode(belongingToVehicleMode);
    }
}
